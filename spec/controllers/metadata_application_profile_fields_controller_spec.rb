# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe MetadataApplicationProfileFieldsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # MetadataField. As you add validations to MetadataField, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { 'label' => 'My Field', 'field_type' => 'numeric', 'requirement_designation' => 'optional', 'validation' => 'valid2', 'multiple' => '0', 'controlled_vocabulary' => 'controlled', 'default_value' => 'blah', 'display_name' => 'blah', 'display_transformation' => 'blah' }
  }

  let(:invalid_attributes) {
    { 'label' => 'My Field', 'field_type' => 'numeric', 'requirement_designation' => 'optional_invalid', 'validation' => 'valid2', 'multiple' => '0', 'controlled_vocabulary' => 'controlled', 'default_value' => 'blah', 'display_name' => 'blah', 'display_transformation' => 'blah' }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MetadataFieldsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  context 'valid object created' do
    let(:metadata_field) { create :metadata_application_profile_field, valid_attributes }

    before do
      metadata_field
    end

    describe 'GET #index' do
      it 'returns a success response' do
        get :index, params: {}, session: valid_session
        expect(response).to be_success
      end
    end
    describe 'Get #index.json' do
      render_views
      it 'returns a json' do
        get :index, params: {}, session: valid_session, format: :json
        expect(response.content_type).to eq('application/json')
        expect(response.body).to eq("[{\"label\":\"My Field\",\"field_type\":\"numeric\",\"requirement_designation\":\"optional\",\"validation\":\"valid2\",\"multiple\":false,\"controlled_vocabulary\":\"controlled\",\"default_value\":\"blah\",\"display_name\":\"blah\",\"display_transformation\":\"blah\",\"url\":\"http://test.host/metadata_application_profile_fields/#{metadata_field.id}.json\"}]")
      end
    end

    describe 'GET #show' do
      it 'returns a success response' do
        get :show, params: { id: metadata_field.to_param }, session: valid_session
        expect(response).to be_success
      end
    end

    describe 'GET #edit' do
      it 'returns a success response' do
        get :edit, params: { id: metadata_field.to_param }, session: valid_session
        expect(response).to be_success
      end
    end

    describe 'PUT #update' do
      context 'with valid params' do
        let(:new_attributes) {
          { 'label' => 'My Field', 'field_type' => 'text', 'requirement_designation' => 'required to publish', 'validation' => 'valid_new', 'multiple' => '1', 'controlled_vocabulary' => 'controlled_new', 'default_value' => 'new', 'display_name' => 'new display', 'display_transformation' => 'new transformation' }
        }

        it 'updates the requested metadata_field' do
          put :update, params: { id: metadata_field.to_param, metadata_application_profile_field: new_attributes }, session: valid_session
          metadata_field.reload
          expect(response).to redirect_to(metadata_field)
          expect(metadata_field.validation).to eq('valid_new')
        end
      end

      context 'with invalid params' do
        it "returns a success response (i.e. to display the 'edit' template)" do
          put :update, params: { id: metadata_field.to_param, metadata_application_profile_field: invalid_attributes }, session: valid_session
          expect(response).to be_success
        end
      end
    end

    describe 'DELETE #destroy' do
      it 'destroys the requested metadata_field' do
        expect {
          delete :destroy, params: { id: metadata_field.to_param }, session: valid_session
        }.to change(MetadataApplicationProfileField, :count).by(-1)
      end

      it 'redirects to the metadata_application_profile_fields list' do
        delete :destroy, params: { id: metadata_field.to_param }, session: valid_session
        expect(response).to redirect_to(metadata_application_profile_fields_url)
      end
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      get :new, params: {}, session: valid_session
      expect(response).to be_success
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new MetadataField' do
        expect {
          post :create, params: { metadata_application_profile_field: valid_attributes }, session: valid_session
        }.to change(MetadataApplicationProfileField, :count).by(1)
      end

      it 'redirects to the created metadata_field' do
        post :create, params: { metadata_application_profile_field: valid_attributes }, session: valid_session
        expect(response).to redirect_to(MetadataApplicationProfileField.last)
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: { metadata_application_profile_field: invalid_attributes }, session: valid_session
        expect(response).to be_success
      end
    end
  end
end
